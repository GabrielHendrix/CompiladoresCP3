digraph {
graph [ordering="out"];
node0[label="program"];
node1[label="func_list"];
node2[label="block"];
node3[label="var_list"];
node4[label="var_list"];
node5[label="(int) vet@1"];
node6[label="(int) 3"];
node5 -> node6;
node4 -> node5;
node3 -> node4;
node2 -> node3;
node7[label="stmt_list"];
node8[label="expr_list"];
node9[label="(int) ="];
node10[label="(int) vet@1"];
node11[label="expr_list"];
node12[label="(int) 0"];
node11 -> node12;
node10 -> node11;
node9 -> node10;
node13[label="(int) 4"];
node9 -> node13;
node8 -> node9;
node7 -> node8;
node14[label="expr_list"];
node15[label="(int) ="];
node16[label="(int) vet@1"];
node17[label="expr_list"];
node18[label="(int) 1"];
node17 -> node18;
node16 -> node17;
node15 -> node16;
node19[label="(int) 8"];
node15 -> node19;
node14 -> node15;
node7 -> node14;
node20[label="expr_list"];
node21[label="(int) ="];
node22[label="(int) vet@1"];
node23[label="expr_list"];
node24[label="(int) 2"];
node23 -> node24;
node22 -> node23;
node21 -> node22;
node25[label="(int) 16"];
node21 -> node25;
node20 -> node21;
node7 -> node20;
node26[label="printf"];
node27[label="(str) @0"];
node26 -> node27;
node28[label="(int) vet@1"];
node29[label="expr_list"];
node30[label="(int) 0"];
node29 -> node30;
node28 -> node29;
node26 -> node28;
node7 -> node26;
node31[label="printf"];
node32[label="(str) @1"];
node31 -> node32;
node7 -> node31;
node33[label="printf"];
node34[label="(str) @0"];
node33 -> node34;
node35[label="(int) vet@1"];
node36[label="expr_list"];
node37[label="(int) 1"];
node36 -> node37;
node35 -> node36;
node33 -> node35;
node7 -> node33;
node38[label="printf"];
node39[label="(str) @2"];
node38 -> node39;
node7 -> node38;
node40[label="printf"];
node41[label="(str) @0"];
node40 -> node41;
node42[label="(int) vet@1"];
node43[label="expr_list"];
node44[label="(int) 2"];
node43 -> node44;
node42 -> node43;
node40 -> node42;
node7 -> node40;
node45[label="printf"];
node46[label="(str) @3"];
node45 -> node46;
node7 -> node45;
node2 -> node7;
node1 -> node2;
node0 -> node1;
}
